function vsf = createVSFCurve(smallPart,largePart,varargin)



p = inputParser;
p.addRequired('smallPart',@isnumeric);
p.addRequired('largePart',@isnumeric);
p.addOptional('mode','default');
p.addOptional('method','Kopelevic');
p.addOptional('wave',400:10:700);


p.parse(smallPart, largePart, varargin{:});
inputs = p.Results;

% The VSF is a matrix with the rows corresponding to angles (at 1 degree
% increments) and the columns corresponding to wavelength bands (as defined
% by "wavelengths" variable).

% We calculate the full VSF first, because PBRT expects to read in values
% for all angles. We set different angles to 0 according to the mode at the
% end of this script.

% This is what PBRT expects when the VSF file is read
angles = 0:180; % DO NOT CHANGE. 

switch inputs.method
    case 'Kopelevic'

waterPhaseFunction = 1.21e-4*(1+0.835*cosd(angles).^2);

% vsfLarge = ieReadSpectra('VSFlarge.mat',angles);
% vsfSmall = ieReadSpectra('VSFsmall.mat',angles);

vsfLarge = [140 46 15 9.3 3.6 2.35 1.1 0.875 0.65 0.425 0.2 0.17 0.14 0.11 0.08 0.05 0.0468533333333333 0.0437066666666667 0.04056 0.0374133333333333 0.0342666666666667 0.03112 0.0279733333333333 0.0248266666666667 0.02168 0.0185333333333333 0.0153866666666667 0.01224 0.00909333333333333 0.00594666666666667 0.0028 0.00265466666666667 0.00250933333333333 0.002364 0.00221866666666667 0.00207333333333333 0.001928 0.00178266666666667 0.00163733333333333 0.001492 0.00134666666666667 0.00120133333333333 0.001056 0.000910666666666667 0.000765333333333333 0.00062 0.000604 0.000588 0.000572 0.000556 0.00054 0.000524 0.000508 0.000492 0.000476 0.00046 0.000444 0.000428 0.000412 0.000396 0.00038 0.000368 0.000356 0.000344 0.000332 0.00032 0.000308 0.000296 0.000284 0.000272 0.00026 0.000248 0.000236 0.000224 0.000212 0.0002 0.000190866666666667 0.000181733333333333 0.0001726 0.000163466666666667 0.000154333333333333 0.0001452 0.000136066666666667 0.000126933333333333 0.0001178 0.000108666666666667 9.95333333333333e-05 9.04e-05 8.12666666666667e-05 7.21333333333333e-05 6.3e-05 6.17333333333333e-05 6.04666666666667e-05 5.92e-05 5.79333333333333e-05 5.66666666666667e-05 5.54e-05 5.41333333333333e-05 5.28666666666667e-05 5.16e-05 5.03333333333333e-05 4.90666666666667e-05 4.78e-05 4.65333333333333e-05 4.52666666666667e-05 4.4e-05 4.3e-05 4.2e-05 4.1e-05 4e-05 3.9e-05 3.8e-05 3.7e-05 3.6e-05 3.5e-05 3.4e-05 3.3e-05 3.2e-05 3.1e-05 3e-05 2.9e-05 2.84e-05 2.78e-05 2.72e-05 2.66e-05 2.6e-05 2.54e-05 2.48e-05 2.42e-05 2.36e-05 2.3e-05 2.24e-05 2.18e-05 2.12e-05 2.06e-05 2e-05 2e-05 2e-05 2e-05 2e-05 2e-05 2e-05 2e-05 2e-05 2e-05 2e-05 2e-05 2e-05 2e-05 2e-05 2e-05 2.16666666666667e-05 2.33333333333333e-05 2.5e-05 2.66666666666667e-05 2.83333333333333e-05 3e-05 3.16666666666667e-05 3.33333333333333e-05 3.5e-05 3.66666666666667e-05 3.83333333333333e-05 4e-05 4.16666666666667e-05 4.33333333333333e-05 4.5e-05 4.66666666666667e-05 4.83333333333333e-05 5e-05 5.16666666666667e-05 5.33333333333333e-05 5.5e-05 5.66666666666667e-05 5.83333333333333e-05 6e-05 6.16666666666667e-05 6.33333333333333e-05 6.5e-05 6.66666666666667e-05 6.83333333333333e-05 7e-05];
vsfSmall = [5.3 5.2 5.1 4.85 4.6 4.25 3.9 3.55 3.2 2.85 2.5 2.26 2.02 1.78 1.54 1.3 1.23266666666667 1.16533333333333 1.098 1.03066666666667 0.963333333333333 0.896 0.828666666666667 0.761333333333333 0.694 0.626666666666667 0.559333333333333 0.492 0.424666666666667 0.357333333333333 0.29 0.2772 0.2644 0.2516 0.2388 0.226 0.2132 0.2004 0.1876 0.1748 0.162 0.1492 0.1364 0.1236 0.1108 0.098 0.0942 0.0904 0.0866 0.0828 0.079 0.0752 0.0714 0.0676 0.0638 0.06 0.0562 0.0524 0.0486 0.0448 0.041 0.0396 0.0382 0.0368 0.0354 0.034 0.0326 0.0312 0.0298 0.0284 0.027 0.0256 0.0242 0.0228 0.0214 0.02 0.0194666666666667 0.0189333333333333 0.0184 0.0178666666666667 0.0173333333333333 0.0168 0.0162666666666667 0.0157333333333333 0.0152 0.0146666666666667 0.0141333333333333 0.0136 0.0130666666666667 0.0125333333333333 0.012 0.0117733333333333 0.0115466666666667 0.01132 0.0110933333333333 0.0108666666666667 0.01064 0.0104133333333333 0.0101866666666667 0.00996 0.00973333333333333 0.00950666666666667 0.00928 0.00905333333333333 0.00882666666666667 0.0086 0.00852 0.00844 0.00836 0.00828 0.0082 0.00812 0.00804 0.00796 0.00788 0.0078 0.00772 0.00764 0.00756 0.00748 0.0074 0.0074 0.0074 0.0074 0.0074 0.0074 0.0074 0.0074 0.0074 0.0074 0.0074 0.0074 0.0074 0.0074 0.0074 0.0074 0.00740666666666667 0.00741333333333333 0.00742 0.00742666666666667 0.00743333333333333 0.00744 0.00744666666666667 0.00745333333333333 0.00746 0.00746666666666667 0.00747333333333333 0.00748 0.00748666666666667 0.00749333333333333 0.0075 0.00752 0.00754 0.00756 0.00758 0.0076 0.00762 0.00764 0.00766 0.00768 0.0077 0.00772 0.00774 0.00776 0.00778 0.0078 0.00782 0.00784 0.00786 0.00788 0.0079 0.00792 0.00794 0.00796 0.00798 0.008 0.00802 0.00804 0.00806 0.00808 0.0081];


vsf = waterPhaseFunction(:)*((530./inputs.wave).^4.3);
vsf = vsf + smallPart*vsfSmall(:)*((550./inputs.wave).^1.7);
vsf = vsf + largePart*vsfLarge(:)*((550./inputs.wave).^0.3);

% Restrict scattering to certain angles
% We keep the value at 0 degrees to be able to model absorption and
% scatteing as additive components. Scattering at 0 deg acts just like
% absoprtion and hence has a multiplicative impact on image intensities.
switch inputs.mode
    case 'default'
        % 0 to 180 degrees
        % Do nothing.
    case 'forward'
        % Only 0 to 90 degrees
        vsf(92:181,:) = 0;
    case 'backward'
        % Only 90 to 180 degrees and 0 degrees.
        vsf(2:91,:) = 0;
    case 'direct'
        % Only 0 degrees
        vsf(2:181,:) = 0;
end
end
    
end